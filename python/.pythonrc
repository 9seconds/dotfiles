# -*- coding: utf-8 -*-
# vim: set ft=python:


from datetime import datetime as dt  # noqa


def _make_z():
    import calendar
    import datetime
    import inspect
    import json
    import os
    import pprint
    import random
    import sys
    import time
    import uuid


    def _print(obj):
        if sys.version_info == 2:
            sys.stdout.write(obj)
            sys.stdout.write("\n")
        else:
            print(obj)


    try:
        import pygments
        import pygments.formatters
        import pygments.lexers

        lexer = pygments.lexers.PythonLexer()
        formatter = pygments.formatters.TerminalFormatter()
    except:
        src = inspect.getsource
    else:
        def src(obj):
            return pygments.highlight(inspect.getsource(obj), lexer, formatter)


    class Z(object):

        @property
        def tf(self):
            return time.time()

        @property
        def ti(self):
            return int(self.tf)

        @property
        def now(self):
            return dt.now()

        @property
        def utcnow(self):
            return dt.utcnow()

        @property
        def uuid4(self):
            return str(uuid.uuid4())

        @property
        def random(self):
            lower = getattr(self, "rs", 0)
            upper = getattr(self, "rf", 1)

            return lower + upper * random.random()

        @property
        def randint(self):
            lower = getattr(self, "rs", 0)
            upper = getattr(self, "rf", 255)

            return random.randint(lower, upper)

        @staticmethod
        def tfdt(dtime):
            if hasattr(dtime, "timestamp"):
                return dtime.timestamp()

            return time.mktime(dtime.timetuple())

        @staticmethod
        def tfudt(dtime):
            return calendar.timegm(dtime.timetuple())

        @staticmethod
        def j(obj):
            return json.dumps(obj, sort_keys=True)

        @staticmethod
        def pj(obj):
            _print(json.dumps(obj, sort_keys=True, indent=4))

        @staticmethod
        def ps(obj):
            _print(src(obj))

        ct = ctime = staticmethod(time.ctime)
        dtft = dt_f_t = staticmethod(dt.fromtimestamp)
        udtft = u_dt_f_t = staticmethod(dt.utcfromtimestamp)
        pf = staticmethod(pprint.pformat)
        pp = staticmethod(pprint.pprint)
        s = staticmethod(src)

        t = ti
        u = uuid = u4 = uuid4
        n = nn = now
        un = unow = utcnow
        r = random
        ri = randint
        t_f_udt = tfudt
        t_f_dt = tfdt

        def __str__(self):
            return "Various magic from PYTHONSTARTUP ({0})!".format(
                os.getenv("PYTHONSTARTUP", "?"))

        if sys.version_info.major == 2:
            def __unicode__(self):
                return str(self).decode("utf-8")

        __repr__ = __str__


    return Z()


def _install_completer():
    import atexit
    import os
    import os.path
    import readline
    import sys

    try:
        import jedi.utils
    except ImportError:
        if sys.version_info.major < 3:
            import rlcompleter  # noqa

            readline.parse_and_bind("tab: complete")
    else:
        jedi.utils.setup_readline()

    history_dir = os.path.join(os.path.expanduser("~"), ".pyhistory")
    if not os.path.isdir(history_dir):
        try:
            os.makedirs(history_dir)
        except:
            return

    executable_inode = os.stat(sys.executable).st_ino
    history_file = os.path.join(history_dir, str(executable_inode))

    if os.path.exists(history_file):
        readline.read_history_file(history_file)

    atexit.register(readline.write_history_file, history_file)


try:
    _install_completer()
except Exception as exc:
    import warnings
    import os

    message = "Cannot inititalize PYTHONSTARTUP file ({0}): {1}".format(
        os.getenv("PYTHONSTARTUP"), exc)
    warnings.warn(message, RuntimeWarning)

    del warnings
    del os
finally:
    del _install_completer


try:
    z = _make_z()
finally:
    del _make_z


try:
    from see import see  # noqa
except ImportError:
    see = dir
