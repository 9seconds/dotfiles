#!/usr/bin/env python3
# MIT License
#
# Copyright (c) 2025 Sergey Arkhipov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import annotations

import argparse
import base64
import collections
import concurrent.futures
import dataclasses
import enum
import hashlib
import hmac
import json
import logging
import os
import pathlib
import pickle
import pprint
import random
import shutil
import stat
import sys
import typing as t

if t.TYPE_CHECKING:
    import io


LOG: t.Final[logging.Logger] = logging.getLogger(__name__)
PATH_STATE_HOME: t.Final[pathlib.Path] = pathlib.Path(os.getenv(
    "XDG_STATE_HOME",
    pathlib.Path.home() / ".local" / "state",
))
PATH_STATE: t.Final[pathlib.Path] = PATH_STATE_HOME / '9dots'

SOURCE: pathlib.Path = pathlib.Path(__file__).parent.resolve()
TARGET: pathlib.Path = pathlib.Path.home().resolve()

DOTS_SECRET_KEY: t.Final[str] = os.getenv("DOTS_SECRET_KEY", "")
if not DOTS_SECRET_KEY:
    sys.exit("DOTS_SECRET_KEY is not defined")

HASH_KEY: t.Final[bytes] = hashlib.pbkdf2_hmac(
    "sha512",
    DOTS_SECRET_KEY.encode("utf-8"),
    __file__.encode("utf-8"),
    260_000,
)


class Link:
    module: Module
    filestem: str

    class LinkError(enum.Flag):
        MISSING_SOURCE = enum.auto()
        MISSING_TARGET = enum.auto()
        WRONG_TARGET = enum.auto()

    def __init__(self, module: Module, filestem: str) -> None:
        self.module = module
        self.filestem = filestem

    @property
    def source(self) -> pathlib.Path:
        return self.module.source / self.module.name / self.filestem

    @property
    def target(self) -> pathlib.Path:
        return self.module.target / self.filestem

    def check(self) -> Link.LinkError:
        error = (
            self.LinkError.MISSING_SOURCE |
            self.LinkError.MISSING_TARGET |
            self.LinkError.WRONG_TARGET
        )

        if self.source.exists():
            error &= ~self.LinkError.MISSING_SOURCE
        if self.target.exists():
            error &= ~self.LinkError.MISSING_TARGET
        if self.target.is_symlink() and self.target.resolve() == self.source:
            error &= ~self.LinkError.WRONG_TARGET

        return error

    def create(self) -> None:
        self.target.parent.mkdir(parents=True, exist_ok=True)
        self.target.symlink_to(self.source)


@dataclasses.dataclass(kw_only=True, frozen=True)
class Module:
    name: str = dataclasses.field(repr=False)
    source: pathlib.Path = dataclasses.field(
        init=False,
        repr=False,
        default=SOURCE,
    )
    target: pathlib.Path = dataclasses.field(
        init=False,
        repr=False,
        default=TARGET,
    )
    files: list[str] = dataclasses.field(default_factory=list)

    def compare_to(self, truth: Module) -> tuple[set[pathlib.Path], list[Link]]:
        if self.name != truth.name:
            raise ValueError("Can only compare modules with the same name")
        if self.source != truth.source:
            raise ValueError("Can only compare modules with the same source")
        if self.target != truth.target:
            raise ValueError("Can only compare modules with the same target")

        to_remove = {pathlib.Path(self.target / stem) for stem in self.files}
        for stem in truth.files:
            to_remove.discard(pathlib.Path(truth.target / stem))

        to_create: list[Link] = []
        for lnk in (Link(self, stem) for stem in self.files):
            match lnk.check():
                case Link.LinkError.WRONG_TARGET:
                    raise ValueError(f"Link {lnk.target} points is incorrect")
                case Link.LinkError.MISSING_SOURCE:
                    to_remove.add(lnk.target)
                case Link.LinkError.MISSING_TARGET:
                    to_create.append(lnk)

        return to_remove, to_create


@dataclasses.dataclass(kw_only=True, frozen=True)
class State:
    target: pathlib.Path = dataclasses.field(init=False, default=TARGET)
    source: pathlib.Path = dataclasses.field(init=False, default=SOURCE)
    modules: dict[str, Module] = dataclasses.field(default_factory=dict)

    def compare_to(self, truth: State) -> tuple[set[pathlib.Path], list[Link]]:
        if self.source != truth.source:
            raise ValueError("Can only compare states with the same source")
        if self.target != truth.target:
            raise ValueError("Can only compare states with the same target")

        to_remove: set[pathlib.Path] = set()
        to_create: list[Link] = []

        for name, mod in truth.modules.items():
            if name in self.modules:
                rm, cr = mod.compare_to(mod)
                to_remove.update(rm)
                to_create.extend(cr)
            else:
                for stem in mod.files:
                    to_create.append(Link(mod, stem))

        return to_remove, to_create

    def save(self) -> None:
        state_path = PATH_STATE.joinpath(self.get_stem())
        data_path = state_path.with_suffix(".pickle")
        mac_path = state_path.with_suffix(".sig")

        serialized_data = pickle.dumps(self)
        data_path.write_bytes(serialized_data)
        data_path.chmod(0o600)

        mac = hmac.digest(HASH_KEY, serialized_data, "sha512")
        mac_path.write_bytes(mac)
        mac_path.chmod(0o600)

    @classmethod
    def load(cls) -> State:
        state_path = PATH_STATE.joinpath(cls.get_stem())

        serialized_data = state_path.with_suffix(".pickle").read_bytes()
        mac = state_path.with_suffix(".sig").read_bytes()

        expected_mac = hmac.digest(HASH_KEY, serialized_data, "sha512")
        if not hmac.compare_digest(mac, expected_mac):
            raise OSError("State file is corrupted")

        data = pickle.loads(serialized_data)
        if not isinstance(data, State):
            raise OSError("State file is corrupted")

        return data

    @classmethod
    def get_stem(cls) -> pathlib.Path:
        base_stem = f"{SOURCE}:{TARGET}".encode()
        encoded = base64.urlsafe_b64encode(base_stem).decode()
        return PATH_STATE / encoded


def main() -> None:
    global SOURCE
    global TARGET
    global REBUILD_CACHE

    PATH_STATE.mkdir(parents=True, exist_ok=True)

    options = get_options()

    logging.basicConfig(
        level=logging.DEBUG if options.debug else logging.INFO,
        format="%(message)s",
    )
    LOG.debug("Options: %s", options)

    SOURCE = options.source_root.absolute()
    TARGET = options.target_root.absolute()

    options.do(options)


def get_options() -> argparse.Namespace:
    def type_directory(value: str) -> pathlib.Path:
        path = pathlib.Path(value).expanduser().resolve()
        if not path.is_dir():
            raise argparse.ArgumentTypeError("Not a directory")
        return path

    parser = argparse.ArgumentParser(
        description="9seconds manages dotfiles",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        default=False,
        help="Run in debug mode",
    )
    parser.add_argument(
        "-s",
        "--source-root",
        type=type_directory,
        default=SOURCE,
        help="Directory with modules",
    )
    parser.add_argument(
        "-t",
        "--target-root",
        type=type_directory,
        default=TARGET,
        help="Directory to create links in",
    )

    commands = parser.add_subparsers(dest="command", required=True)

    regenerate_cmd = commands.add_parser(
        "regenerate",
        help="Regenerates the cache",
    )
    regenerate_cmd.set_defaults(do=do_regenerate)

    ensure_cmd = commands.add_parser(
        "ensure",
        help="Ensures that module is properly set up",
    )
    ensure_cmd.add_argument(
        'module',
        nargs=argparse.ONE_OR_MORE,
        help="Module names",
    )
    ensure_cmd.set_defaults(do=do_ensure)

    drop_cmd = commands.add_parser(
        "drop",
        help="Drop modules",
    )
    drop_cmd.add_argument(
        'module',
        nargs=argparse.ONE_OR_MORE,
        help="Module names",
    )
    drop_cmd.set_defaults(do=do_drop)

    state_cmd = commands.add_parser(
        "state",
        help="Shows current state",
    )
    state_cmd.set_defaults(do=do_state)

    return parser.parse_args()


def do_regenerate(_: argparse.Namespace) -> None:
    target_state = reconstruct_target_state()
    target_state.save()


def do_ensure(options: argparse.Namespace) -> None:
    try:
        target_state = State.load()
    except Exception as exc:
        LOG.debug("Cannot load a cache: %s. Please regenerate", exc)
        sys.exit(1)

    source_state = State(
        modules={name: scan_module(name) for name in options.module},
    )

    to_remove, to_create = target_state.compare_to(source_state)
    for path in to_remove:
        LOG.info("Removing %s", path)
        try:
            path.unlink()
        except Exception as exc:
            LOG.error("Cannot remove %s: %s", path, exc)
            raise

    for link in to_create:
        LOG.info("Creating %s -> %s", link.target, link.source)
        try:
            link.create()
        except Exception as exc:
            LOG.error(
                "Cannot create %s -> %s: %s",
                link.target,
                link.source,
                exc,
            )
            raise

    target_state.modules.update(source_state.modules)
    target_state.save()


def do_drop(options: argparse.Namespace) -> None:
    try:
        target_state = State.load()
    except Exception as exc:
        LOG.debug("Cannot load a cache: %s. Please regenerate", exc)
        sys.exit(1)

    for mod_name in options.module:
        mod = target_state.modules.pop(mod_name, None)
        if mod is None:
            continue

        LOG.debug("Scheduling module %s for removal", mod_name)
        to_remove, _ = mod.compare_to(Module(name=mod_name))
        for path in to_remove:
            path.unlink(missing_ok=True)

    target_state.save()


def do_state(_: argparse.Namespace) -> None:
    try:
        target_state = State.load()
    except Exception as exc:
        LOG.debug("Cannot load a cache: %s. Please regenerate", exc)
        sys.exit(1)

    pprint.pprint(target_state)  # noqa: T203


def reconstruct_target_state() -> State:
    futures: collections.deque[
        concurrent.futures.Future[list[Module]]
    ] = collections.deque()
    pool = concurrent.futures.ThreadPoolExecutor()
    state = State()

    def traverse_dir(path: pathlib.Path) -> list[Module]:
        LOG.debug("Traversing %s", path)

        modules: list[Module] = []

        try:
            elements = list(path.iterdir())
        except Exception as exc:
            LOG.warning("Skipping %s: %s", path, exc)
            return modules

        for el in elements:
            try:
                resolved = el.resolve()
                stat_result = el.lstat().st_mode
            except Exception as exc:
                LOG.warning("Skipping %s: %s", el, exc)
                continue

            match stat.S_IFMT(stat_result):
                case stat.S_IFLNK if (
                    resolved.is_relative_to(SOURCE) and
                    resolved.parent.is_relative_to(SOURCE) and
                    resolved.is_file()
                ):
                    mod_name = resolved.relative_to(SOURCE).parts[0]
                    LOG.debug(
                        "Found (module %s) %s -> %s",
                        mod_name,
                        el,
                        resolved,
                    )
                    file_stem = os.fspath(
                        resolved.relative_to(SOURCE / mod_name),
                    )
                    modules.append(Module(name=mod_name, files=[file_stem]))
                case stat.S_IFDIR:
                    futures.append(pool.submit(traverse_dir, el))

        return modules

    with pool:
        futures.append(pool.submit(traverse_dir, TARGET))
        while futures:
            for mod in futures.popleft().result():
                if mod.name not in state.modules:
                    state.modules[mod.name] = mod
                else:
                    state.modules[mod.name].files.extend(mod.files)

    return state


def scan_module(name: str) -> Module:
    path = SOURCE / name
    if not path.is_dir():
        raise ValueError(f"Module {name} does not exist")

    files: list[str] = []
    for root, _, filenames in os.walk(path):
        root_path = pathlib.Path(root)
        for filename in filenames:
            file_path = root_path / filename
            if file_path.is_file():
                files.append(os.fspath(file_path.relative_to(path)))

    if not files:
        raise ValueError(f"Module {name} is empty")

    return Module(name=name, files=files)


if __name__ == "__main__":
    main()
