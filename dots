#!/usr/bin/env python3
# MIT License
#
# Copyright (c) 2024 Sergey Arkhipov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
from __future__ import annotations

import argparse
import collections
import concurrent.futures
import functools
import inspect
import json
import logging
import os
import os.path
import pathlib
import stat
import typing as t

if t.TYPE_CHECKING:
    SnapshotT: t.TypeAlias = dict[pathlib.Path, pathlib.Path]
    ChangesT: t.TypeAlias = dict[pathlib.Path, pathlib.Path | None]
    ActionT: t.TypeAlias = t.Callable[
        ["FS", SnapshotT, argparse.Namespace],
        None,
    ]

POOL: t.Final[concurrent.futures.Executor] = (
    concurrent.futures.ThreadPoolExecutor()
)
"""Pool of threads required for adoption."""

LOG: t.Final[logging.Logger] = logging.getLogger(__name__)
"""The main logger."""

REPOSITORY_ROOT: t.Final[pathlib.Path] = (
    pathlib.Path(__file__).absolute().parent
)
"""The root to the repository with dotfiles."""

XDG_STATE_HOME: t.Final[pathlib.Path] = pathlib.Path(
    os.getenv("XDG_STATE_HOME")
    or pathlib.Path.home().joinpath(".local", "state"),
)
"""State directory in XDG specification."""

STATE_DBPATH: t.Final[pathlib.Path] = XDG_STATE_HOME.joinpath(
    "9dots",
    "db.json",
)
"""Path to the file with a database."""


class FS:
    changes: ChangesT

    def __init__(self) -> None:
        self.changes = {}

    def delete(self, target: pathlib.Path, source: pathlib.Path) -> None:
        LOG.debug("Delete %s -> %s", target, source)
        self.resolve(target)

        match self.changes[target]:
            case None:
                return
            case value if value != source:
                raise ValueError(
                    f"{target} points to {value} but {source} is expected",
                )

        self.changes[target] = None

    def add(self, target: pathlib.Path, source: pathlib.Path) -> None:
        LOG.debug("Add %s -> %s", target, source)

        self.resolve(target)

        if self.changes[target] not in {source, None}:
            raise ValueError(
                f"{target} points to {self.changes[target]}, "
                f"can't use {source}",
            )

        self.changes[target] = source

    def resolve(self, path: pathlib.Path) -> None:
        if path not in self.changes:
            resolved = path.resolve()
            self.changes[path] = resolved if resolved.exists() else None

    def apply(self, root: pathlib.Path, dry_run: bool = False) -> None:
        def is_need_to_do(
            target: pathlib.Path,
            source: pathlib.Path | None,
        ) -> bool:
            target_exists = os.path.isfile(target)

            if source is None:
                return target_exists

            if target_exists:
                return target.resolve() != source

            return True

        changes = {k: v for k, v in self.changes.items() if is_need_to_do(k, v)}

        if dry_run:
            self.printout(changes)
        else:
            self.execute(root, changes)

    def printout(self, changes: ChangesT) -> None:
        for k, v in sorted((k, v) for k, v in changes.items() if v):
            print(f"Link {k} -> {v}")  # noqa: T201

        for k in sorted(k for k, v in changes.items() if not v):
            print(f"Delete {k}")  # noqa: T201

    def execute(self, root: pathlib.Path, changes: ChangesT) -> None:
        for target, source in changes.items():
            if source is None:
                target.unlink()
                target = target.parent
                while target != root and not list(target.iterdir()):
                    target.rmdir()
                    target = target.parent
            else:
                target.parent.mkdir(parents=True, exist_ok=True)
                target.symlink_to(source)

    def update_snapshot(self, snapshot: SnapshotT) -> None:
        for target, source in self.changes.items():
            if source is None:
                snapshot.pop(target, None)
            else:
                snapshot[target] = source


def main() -> None:
    options = get_options()

    logging.basicConfig(
        format="> %(message)s",
        level=logging.DEBUG if options.debug else logging.INFO,
    )
    LOG.debug("Parameters: %s", options)
    STATE_DBPATH.parent.mkdir(parents=True, exist_ok=True)

    snapshot: SnapshotT = {}
    if STATE_DBPATH.exists():
        snapshot = {
            pathlib.Path(k): pathlib.Path(v)
            for k, v in json.loads(STATE_DBPATH.read_text()).items()
        }

    options.action(FS(), snapshot, options)


def get_options() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Manage dotfiles for this repository.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    def path_type(value: str) -> pathlib.Path:
        pth = pathlib.Path(value).expanduser().absolute()
        try:
            pth.relative_to(REPOSITORY_ROOT)
        except ValueError as exc:
            raise argparse.ArgumentTypeError(str(exc)) from exc

        if pth.parent != REPOSITORY_ROOT:
            raise argparse.ArgumentTypeError(
                f"{value} should be a top level directory",
            )

        return dir_type(str(pth))

    def dir_type(value: str) -> pathlib.Path:
        pth = pathlib.Path(value).expanduser().absolute()
        if not pth.is_dir():
            raise argparse.ArgumentTypeError(f"{value} should be a directory")

        return pth

    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        default=False,
        help="Run in debug mode",
    )
    parser.add_argument(
        "-t",
        "--target",
        default=str(pathlib.Path.home()),
        type=dir_type,
        help="Directory to farm links into",
    )
    parser.add_argument(
        "-n",
        "--dry-run",
        action="store_true",
        default=False,
        help="Dry run",
    )

    subparsers = parser.add_subparsers(title="Subcommands")

    plug_parser = subparsers.add_parser(
        "plug",
        help="Plug a subdirectory into target",
    )
    plug_parser.add_argument(
        "module",
        type=path_type,
        nargs=argparse.ONE_OR_MORE,
        help="Module directory to use",
    )
    plug_parser.set_defaults(action=action_plug)

    unplug_parser = subparsers.add_parser(
        "unplug",
        help="Unplug directory from target",
    )
    unplug_parser.add_argument(
        "module",
        type=path_type,
        nargs=argparse.ONE_OR_MORE,
        help="Module directory to use",
    )
    unplug_parser.set_defaults(action=action_unplug)

    adopt_parser = subparsers.add_parser("adopt", help="Adopt existing target")
    adopt_parser.set_defaults(action=action_adopt)

    return parser.parse_args()


def action_write_snapshot(func: ActionT) -> ActionT:
    @functools.wraps(func)
    def decorator(
        fs: FS,
        snapshot: SnapshotT,
        options: argparse.Namespace,
    ) -> None:
        func(fs, snapshot, options)
        if options.dry_run:
            return

        fs.update_snapshot(snapshot)
        STATE_DBPATH.write_text(
            json.dumps(
                {str(k): str(v) for k, v in snapshot.items()},
                sort_keys=True,
                indent=2,
            ),
        )

    return decorator


def action_apply_fs(func: ActionT) -> ActionT:
    @functools.wraps(func)
    def decorator(
        fs: FS,
        snapshot: SnapshotT,
        options: argparse.Namespace,
    ) -> None:
        func(fs, snapshot, options)
        fs.apply(options.target, options.dry_run)

    return decorator


@action_write_snapshot
@action_apply_fs
def action_plug(
    fs: FS,
    snapshot: SnapshotT,
    options: argparse.Namespace,
) -> None:
    inspect.unwrap(action_unplug)(fs, snapshot, options)

    for module in options.module:
        for dirpath, _, filenames in module.walk():
            target_dir = options.target.joinpath(
                str(dirpath)[len(str(module)) + 1 :],
            )
            for filename in filenames:
                fs.add(target_dir / filename, dirpath / filename)


@action_write_snapshot
@action_apply_fs
def action_unplug(
    fs: FS,
    snapshot: SnapshotT,
    options: argparse.Namespace,
) -> None:
    to_filter = tuple(f"{path}/" for path in options.module)

    for target, source in snapshot.items():
        if str(source).startswith(to_filter):
            fs.delete(target, source)


@action_write_snapshot
def action_adopt(fs: FS, _: SnapshotT, options: argparse.Namespace) -> None:
    futures: collections.deque[concurrent.futures.Future[None]] = (
        collections.deque()
    )
    root = options.target.absolute()
    futures.append(POOL.submit(traverse_dir, root, root, fs, futures))

    while futures:
        futures.popleft().result()


def traverse_dir(
    directory: pathlib.Path,
    root: pathlib.Path,
    fs: FS,
    futures: collections.deque[concurrent.futures.Future[None]],
) -> None:
    LOG.debug("Traverse %s", directory)

    if not directory.is_relative_to(root):
        LOG.debug("%s is not relative to root %s", directory, root)
        return

    for path in directory.iterdir():
        match stat.S_IFMT(path.lstat().st_mode):
            case stat.S_IFLNK:
                resolved = path.resolve()
                if resolved.is_relative_to(REPOSITORY_ROOT):
                    fs.add(path, resolved)
            case stat.S_IFDIR:
                futures.append(
                    POOL.submit(traverse_dir, path, root, fs, futures),
                )


if __name__ == "__main__":
    main()
