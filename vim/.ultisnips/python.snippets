priority 10


global !p
sentinel = object()

def ifempty(value, print_value):
    return print_value if value else ""


def def_ifempty(value, print_value):
    if value and current_indent():
        return print_value
    return ""


def delimeter(param, fill="-"):
    return fill * len(param)


def comment_out(text, pre=0, post=0):
    global snip

    lines = [""] * pre
    lines.extend(text.splitlines())
    lines.extend([""] * post)

    indent = smart_indent()
    if len(lines) > 1:
        for line in lines:
            if indent:
                new_line = "# {0}".format(line.split(indent, 1)[-1])
            else:
                new_line = "# {0}".format(line)
            snip.rv += "\n" + snip.mkline(new_line.rstrip(), indent)


def parse_params(param_string):
    params = []

    for param in param_string.split(","):
        param_name = param.strip().lstrip("*").split("=", 1)[0]
        if param_name:
            params.append(("*" in param, param_name))

    return params


def params_to_propagate(param_string):
    params = []

    for param in param_string.split(","):
        param = param.strip()
        param_name = param.lstrip("*").split("=", 1)[0]

        if not param_name:
            continue
        elif "*" not in param and "=" in param:
            params.append("{0}={0}".format(param_name))
        elif "*" in param:
            params.append(param)
        else:
            params.append(param_name)

    return ", ".join(params)


def self_assigns(param_string):
    global snip

    params = parse_params(param_string)
    common_params, special_params = [], []
    for is_special, name in params:
        if is_special:
            special_params.append(name)
        else:
            common_params.append(name)

    indent_level, is_first = smart_indent(), True
    for param in common_params:
        line = "self.{0} = {0}".format(param)
        if is_first:
            snip.rv = line
            is_first = False
        else:
            snip.rv += "\n" + snip.mkline(line, indent_level)

    if common_params and special_params:
        snip.rv += "\n" + snip.mkline("", indent_level)

    if special_params:
        for param in special_params:
            line = "self.{0} = {0}".format(param)
            if is_first:
                snip.rv = line
                is_first = False
            else:
                snip.rv += "\n" + snip.mkline(line, indent_level)


def current_indent():
    return int(vim.eval("indent('.')"))


def smart_indent():
    return " " * current_indent()
endglobal


snippet !new "New module definition" b
# vim: set et sw=4 ts=4:

$1
endsnippet


snippet # "Comment" i
  # $1
endsnippet

snippet pdb "Put PDB tracing here" b
from pdb import set_trace; set_trace()
endsnippet


snippet imp "Import module by name" b
import ${1:module}
endsnippet


snippet from "'from module import name' clause" b
from ${1:.} import ${2:*}
endsnippet


snippet #T "TODO comment" b
# TODO(${1:`git config user.name || whoami`})`!p snip.rv = ifempty(t[2], ": ")`$2`!p comment_out(snip.v.text)`
endsnippet


snippet #F "FIXME comment" b
# FIXME(${1:`git config user.name || whoami`})`!p snip.rv = ifempty(t[2], ": ")`$2`!p comment_out(snip.v.text)`
endsnippet


snippet #H "HACK comment" b
# HACK(${1:`git config user.name || whoami`})`!p snip.rv = ifempty(t[2], ": ")`$2`!p comment_out(snip.v.text)`
endsnippet


snippet #X "XXX comment" b
# XXX(${1:`git config user.name || whoami`})`!p snip.rv = ifempty(t[2], ": ")`$2`!p comment_out(snip.v.text)`
endsnippet


snippet #D "Temporary disable the block of code" b
# FIXME(${1:`git config user.name || whoami`}): TEMPORARY DISABLED
#
# ${2:Comment}
#
# `!p snip.rv += delimeter(t[2]); comment_out(snip.v.text)`
# `!p snip.rv += delimeter(t[2])`
#
# FIXME($1): END OF TEMPORARY DISABLED BLOCK
endsnippet


snippet tryex "'try/except' clause" b
try:
	${1:${VISUAL}}
except ${2:Exception}`!p snip.rv = ifempty(t[3], " as ")`${3:exc}:
	${4:pass}
endsnippet


snippet tryfi "'try/finally' clause'" b
try:
	${1:${VISUAL}}
finally:
	$2
endsnippet


snippet tryexfi "'try/except/finally' clause" b
try:
	${1:${VISUAL}}
except ${2:Exception}`!p snip.rv = ifempty(t[3], " as ")`${3:exc}:
	${4:pass}
finally:
	$5
endsnippet


snippet def "Function definition" b
def ${1:function}(`!v indent(".") ? "self": ""``!p snip.rv = def_ifempty(t[2], ", ")`${2:*args, **kwargs}):
	${3:${VISUAL:# here be dragons}}
endsnippet


snippet defc "Class method definition" b
@classmethod
def ${1:method}(cls`!p snip.rv = ifempty(t[2], ", ")`${2:*args, **kwargs}):
	${3:${VISUAL:# here be dragons}}
endsnippet


snippet defs "Class method definition" b
@staticmethod
def ${1:method}(${2:*args, **kwargs}):
	${3:${VISUAL:# here be dragons}}
endsnippet


snippet class "Class definition" b
class ${1:ClassName}`!p snip.rv = ifempty(t[2], "(")`${2:object}`!p snip.rv = ifempty(t[2], ")")`:
	pass
endsnippet


snippet classi "Class definition" b
class ${1:ClassName}`!p snip.rv = ifempty(t[2], "(")`${2:object}`!p snip.rv = ifempty(t[2], ")")`:

	def __init__(self`!p snip.rv = ifempty(t[3], ", ")`${3:*args, **kwargs}):
		${4:super(${5:$1}`!p snip.rv = ifempty(t[5], ", self")`).__init__(${6:`!p snip.rv = params_to_propagate(t[3])`})}

		${7:`!p self_assigns(t[3])`}
endsnippet


snippet propr "Read property" b
@property
def ${1:name}(self):
	${2:${VISUAL:# here be dragons}}
endsnippet


snippet propw "Read/write property" b
@property
def ${1:name}(self):
	${2:return self._$1}

@$1.setter
def $1(self, value):
	${3:self.$1 = value}
endsnippet


snippet la "Lambda" is
lambda ${1:x}: ${2:$1}
$0
endsnippet


snippet with "with statement" b
with ${1:expr}`!p snip.rv = ifempty(t[2], " as ")`${2:var}:
	${3:${VISUAL:pass}}

$0
endsnippet
