#!/usr/bin/env python3
# MIT License
#
# Copyright (c) 2024 Sergey Arkhipov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import annotations

import argparse
import base64
import dataclasses
import datetime
import functools
import json
import logging
import os
import re
import shutil
import urllib.parse
import subprocess
import sys
import typing as t
import zlib

if t.TYPE_CHECKING:
    import collections.abc


LOG: t.Final[logging.Logger] = logging.getLogger(__name__)

GIT_TIMEOUT: t.Final[int] = 10
GIT_CONFIG_NAME: t.Final[str] = "gitbr"
CURRENT_BRANCH: t.Final[str] = "."

ENV_PREFIX: t.Final[str] = "GITBR_"
ENV_ISSUE_URL_FORMAT: t.Final[str] = f"{ENV_PREFIX}ISSUE_URL"
ENV_ISSUE_RE: t.Final[str] = f"{ENV_PREFIX}ISSUE_RE"
ENV_USERNAME: t.Final[str] = f"{ENV_PREFIX}USERNAME"
ENV_REMOTE: t.Final[str] = f"{ENV_PREFIX}REMOTE"
ENV_TARGET: t.Final[str] = f"{ENV_PREFIX}TARGET"


class GitBrError(Exception):
    pass


@dataclasses.dataclass(kw_only=True, frozen=True)
class RefInfo:
    full_ref: str
    head: bool
    gone: bool

    @functools.cached_property
    def ref(self) -> str:
        return re.sub(r"refs/(heads|remotes)/", "", self.full_ref)

    @functools.cached_property
    def local(self) -> bool:
        return self.full_ref.startswith("refs/heads/")


@dataclasses.dataclass(kw_only=True)
class Metadata:
    timestamp: datetime.datetime = dataclasses.field(
        default_factory=lambda: datetime.datetime.now(datetime.timezone.utc)
    )
    upstream: str = dataclasses.field(default="")
    description: str = dataclasses.field(default="")
    issue: str = dataclasses.field(default="")
    issue_url: str = dataclasses.field(default="")

    @property
    def created_at(self) -> str:
        return format_date(self.timestamp)

    def serialize(self) -> str:
        as_dict = dataclasses.asdict(self)
        as_dict["timestamp"] = as_dict["timestamp"].isoformat()
        as_json = json.dumps(as_dict, separators=(",", ":"))
        as_zlib = zlib.compress(as_json.encode(), level=zlib.Z_BEST_COMPRESSION)
        as_str = base64.a85encode(as_zlib).decode("latin-1")

        return as_str

    @classmethod
    def load_from(cls, as_str: str) -> Metadata:
        as_zlib = base64.a85decode(as_str.encode("latin-1"))
        as_json = zlib.decompress(as_zlib)
        as_dict = json.loads(as_json)
        as_dict["timestamp"] = datetime.datetime.fromisoformat(
            as_dict["timestamp"]
        )

        return cls(**as_dict)


@dataclasses.dataclass(kw_only=True)
class Branch:
    name: str
    metadata: Metadata | None = dataclasses.field(default=None)

    @functools.cached_property
    def remote(self) -> str | None:
        try:
            res = git("rev-parse", "--abbrev-ref", f"{self.name}@{{upstream}}")
        except subprocess.CalledProcessError as exc:
            if exc.returncode != 128:
                raise
            return None

        return res.stdout

    @property
    def upstream(self) -> str:
        return self.metadata.upstream if self.metadata else ""

    @functools.cached_property
    def unique_commits(self) -> tuple[datetime.datetime, ...]:
        if not self.upstream:
            return ()

        output = git(
            "log",
            "--pretty=format:%cI",
            f"{self.upstream}..{self.name}",
        )

        return tuple(
            datetime.datetime.fromisoformat(line.replace("Z", "+00:00"))
            for line in output.out_lines
        )

    @functools.cached_property
    def last_updated(self) -> str:
        if not self.unique_commits:
            return ""

        return format_date(self.unique_commits[0])

    def save(self) -> None:
        if self.metadata:
            git(
                "config",
                "--local",
                "--replace-all",
                f"branch.{self.name}.{GIT_CONFIG_NAME}",
                self.metadata.serialize(),
            )

    @classmethod
    def load_from(self, name: str) -> Branch:
        branch = Branch(name=name)

        try:
            value = git(
                "config",
                "--local",
                "--get",
                f"branch.{name}.{GIT_CONFIG_NAME}",
            )
        except subprocess.CalledProcessError:
            pass
        else:
            branch.metadata = Metadata.load_from(value.stdout)

        return branch


@dataclasses.dataclass(kw_only=True)
class SubprocessResult:
    stdout: str
    stderr: str
    return_code: int

    @functools.cached_property
    def out_lines(self) -> list[str]:
        return self.stdout.splitlines()

    @functools.cached_property
    def err_lines(self) -> list[str]:
        return self.stderr.splitlines()

    @classmethod
    def make(cls, proc: subprocess.CompletedProcess[str]) -> SubprocessResult:
        return cls(
            stdout=proc.stdout.rstrip(),
            stderr=proc.stderr.rstrip(),
            return_code=proc.returncode,
        )


def main() -> str | int | None:
    options = get_options()

    if options.debug:
        logging.basicConfig(
            format="%(levelname)s: %(message)s", level=logging.DEBUG
        )
    else:
        logging.basicConfig(format="%(message)s", level=logging.INFO)

    try:
        return t.cast(str | None, options.run(options))
    except GitBrError as exc:
        LOG.error(str(exc))
        return 1
    except subprocess.CalledProcessError as exc:
        LOG.error("Command %s has finished with %d", exc.cmd, exc.returncode)
        LOG.error("Stdout: %s", exc.stdout)
        LOG.error("Stderr: %s", exc.stderr)
        return 1


def get_options() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="9seconds manages git branches.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        default=False,
        help="Run in debug mode.",
    )

    subparsers = parser.add_subparsers()

    new_parser = subparsers.add_parser(
        "new",
        aliases=["n"],
        description="Create new branch.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    new_parser.add_argument(
        "-u",
        "--upstream",
        default=conf_target(),
        type=type_upstream_branch,
        help="Set upstream target.",
    )
    new_parser.add_argument(
        "-r",
        "--remote",
        default=None,
        help="Name of the remote branch to use",
    )
    new_parser.add_argument(
        "-i",
        "--issue",
        help="Some text that contains issue ID (could be a link).",
    )
    new_parser.add_argument(
        "-t",
        "--description",
        default=None,
        help="Branch description.",
    )
    new_parser.add_argument(
        "stem",
        type=type_branch_stem,
        help="Suffix of the branch, short description.",
    )
    new_parser.set_defaults(run=cmd_new)

    edit_parser = subparsers.add_parser(
        "edit",
        aliases=["e"],
        help="Edit branch metadata.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    edit_parser.add_argument(
        "-b",
        "--branch",
        type=type_local_branch,
        default=CURRENT_BRANCH,
        help="Branch to edit."
    )
    edit_parser.add_argument(
        "field",
        choices=sorted(["remote", "upstream", "issue", "description"]),
        help="A fieldname to set",
    )
    edit_parser.add_argument(
        "value",
        help="Value to set",
    )
    edit_parser.set_defaults(run=cmd_edit)

    switch_parser = subparsers.add_parser(
        "switch",
        aliases=["w"],
        description="Switch to another branch. Requires fzf.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    switch_parser.add_argument(
        "query",
        nargs=argparse.OPTIONAL,
        default="",
        help="Query to search for branches.",
    )
    switch_parser.set_defaults(run=cmd_switch)

    delete_parser = subparsers.add_parser(
        "delete",
        aliases=["d"],
        description="Delete branches.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    delete_parser.add_argument(
        "-r",
        "--remote",
        action="store_true",
        default=False,
        help="Delete remote branch as well.",
    )
    delete_parser.add_argument(
        "branch",
        type=type_local_branch,
        nargs=argparse.ZERO_OR_MORE,
        help="Branch to delete.",
    )
    delete_parser.set_defaults(run=cmd_delete)

    show_parser = subparsers.add_parser(
        "show",
        aliases=["s"],
        description="Show metadata about branch.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    show_parser.add_argument(
        "name",
        type=type_local_branch,
        default=CURRENT_BRANCH,
        help="Branch name.",
    )
    show_parser.set_defaults(run=cmd_show)

    list_parser = subparsers.add_parser(
        "list",
        aliases=["l"],
        description="List branches. Current branch is always on a top.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    list_parser.add_argument(
        "-m",
        "--more",
        action="count",
        default=0,
        help=(
            "Show more and more branches (own, local everything). "
            "Repeat option to increase verbosity."
        ),
    )
    list_parser.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        help="Increase verbosity of output. Repeat option to increase.",
    )
    list_parser.set_defaults(run=cmd_list)

    gc_parser = subparsers.add_parser(
        "gc",
        aliases=["g"],
        description="Cleanup stale branches.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    gc_parser.set_defaults(run=cmd_gc)

    env_parser = subparsers.add_parser(
        "env",
        description="Show relevant environment and its settings.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    env_parser.set_defaults(run=cmd_env)

    retarget_parser = subparsers.add_parser(
        "retarget",
        description="Change branch upstream in case of PR",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    retarget_parser.add_argument(
        "new", type=type_upstream_branch, help="New upstream"
    )
    retarget_parser.set_defaults(run=cmd_retarget)

    ns = parser.parse_args()
    if not hasattr(ns, "run"):
        parser.print_help()
        sys.exit(1)

    return ns


def type_upstream_branch(value: str) -> str:
    try:
        git("rev-parse", f"refs/remotes/{value}")
    except subprocess.CalledProcessError as exc:
        if exc.returncode == 128:
            first_line = next(iter(exc.stderr.splitlines()))
            raise argparse.ArgumentTypeError(first_line) from exc
        raise

    return value


def type_local_branch(value: str) -> str:
    if value == CURRENT_BRANCH:
        try:
            res = git("symbolic-ref", "--short", "--quiet", "HEAD")
        except subprocess.CalledProcessError as exc:
            if exc.returncode == 128:
                raise argparse.ArgumentTypeError(exc.stderr.rstrip()) from exc
            raise

        value = res.stdout

    try:
        validate_branch_exists(value)
    except GitBrError as exc:
        raise argparse.ArgumentTypeError(str(exc))

    return value


def type_branch_stem(value: str) -> str:
    if not re.fullmatch(r"[a-zA-Z0-9/-_]+", value):
        raise argparse.ArgumentTypeError(
            "Stem should be alphanumeric, dash, underscore and /"
        )
    return value.replace("-", "_")


def cmd_new(options: argparse.Namespace) -> str | None:
    issue_stem = ""
    if options.issue:
        try:
            issue = extract_issue(options.issue)
        except ValueError as exc:
            return str(exc)
        else:
            issue_stem = re.sub(r"[^a-zA-Z0-9]", "", issue.group(0)).lower()

    branch_chunks = [get_git_user_name(), issue_stem, options.stem]
    branch_name = "-".join(chunk for chunk in branch_chunks if chunk).lower()

    git("switch", "--guess", "--create", branch_name)

    branch = Branch(name=branch_name, metadata=Metadata())
    branch.save()
    options.branch = branch_name

    for value in "issue", "description", "upstream", "remote":
        if (v := getattr(options, value)) is not None:
            options.field = value
            options.value = v
            cmd_edit(options)

    return None


def cmd_edit(options: argparse.Namespace) -> str | None:
    branch = Branch.load_from(options.branch)
    if not branch.metadata:
        branch.metadata = Metadata()

    match options.field:
        case "description":
            branch.metadata.description = options.value

        case "upstream":
            branch.metadata.upstream = options.value

        case "issue":
            try:
                match = extract_issue(options.value)
            except ValueError as exc:
                return str(exc)
            branch.metadata.issue = match.group(0)
            branch.metadata.issue_url = match.expand(conf_issue_url_format())

        case "remote":
            git("branch", f"--set-upstream-to={options.value}", branch.name)

        case _:
            raise RuntimeError(f"Unknown action {options.field}")

    branch.save()

    return None


def cmd_switch(options: argparse.Namespace) -> str | None:
    refs = [ref for ref in get_git_refs().values() if not ref.head]
    refs.sort(
        key=lambda ref: (
            ref.local,
            ref.ref.startswith(get_git_user_name()),
            ref.ref,
        ),
        reverse=True,
    )

    lines = fzf(
        "\n".join(ref.ref for ref in refs),
        auto_select=True,
        query=options.query
    )
    if lines:
        git("checkout", lines[0])

    return None


def cmd_show(options: argparse.Namespace) -> str | None:
    branch = Branch.load_from(options.name)

    print(f"Upstream: {branch.upstream}")
    print(f"Remote: {branch.remote or '-'}")
    print(f"Last updated: {branch.last_updated}")
    print(f"Unique commits: {len(branch.unique_commits)}")

    if not branch.metadata:
        return None

    print(f"Created at: {branch.metadata.created_at}")
    print(f"Description: {branch.metadata.description}")
    print(f"Issue: {branch.metadata.issue}")
    print(f"Issue URL: {branch.metadata.issue_url}")

    return None


def cmd_delete(options: argparse.Namespace) -> str | None:
    all_refs = get_git_refs()
    candidates = [name for name, ref in all_refs.items() if ref.local]
    if options.branch:
        candidates = [ref for ref in candidates if ref in set(options.branch)]
    else:
        candidates = fzf(
            "\n".join(ref for ref in candidates),
            multi_select=True,
        )

    for name in candidates:
        if options.remote:
            branch = Branch.load_from(name)
            if not branch.remote:
                continue
            if branch.remote not in all_refs:
                continue
            if all_refs[branch.remote].gone:
                continue
            origin, _ , remote = branch.remote.partition("/")
            git("push", "--delete", origin, remote)

        git("branch", "-D", name)

    return None


def cmd_list(options: argparse.Namespace) -> str | None:
    all_refs = (
        (name, ref) for name, ref in get_git_refs().items() if ref.local
    )
    if not options.more:
        all_refs = (
            (name, ref)
            for name, ref in all_refs
            if name.startswith(f"{get_git_user_name()}-")
        )

    branches: list[Branch] = []
    first_branch = Branch(name="")

    for name, ref in all_refs:
        br = Branch.load_from(name)
        if ref.head:
            first_branch = br
        else:
            branches.append(br)

    branches.sort(key=lambda x: x.name)
    branches.insert(0, first_branch)

    for branch in branches:
        if not branch.name:
            print()
            continue

        if options.verbose == 0:
            print(branch.name)
            continue

        updated = "-"
        if up := branch.last_updated:
            updated = format_days_ago(datetime.datetime.fromisoformat(up))
        print(
            f"{branch.name} (upstream:{branch.upstream or '-'} updated:{updated} commits:{len(branch.unique_commits)})"
        )

    return None


def cmd_gc(_: argparse.Namespace) -> str | None:
    deleted_refs = [
        name for name, ref in get_git_refs().items() if ref.local and ref.gone
    ]
    if deleted_refs:
        git("branch", "-D", *deleted_refs)

    return None


def cmd_env(_: argparse.Namespace) -> str | None:
    for name in sorted((ENV_ISSUE_RE, ENV_ISSUE_URL_FORMAT, ENV_USERNAME)):
        if (v := os.getenv(name)) is not None:
            print(f"${name} = {v}")
        else:
            print(f"${name}")
    return None


def cmd_retarget(options: argparse.Namespace) -> str | None:
    base = git("merge-base", "--fork-point", options.old, "HEAD").stdout
    git("rebase", "--onto", options.new, base)
    return None


def extract_issue(text: str) -> re.Match[str]:
    issue_re = conf_issue_re()
    if not issue_re:
        raise ValueError(f"${issue_re} is not defined")

    issue = issue_re.search(text)
    if not issue:
        raise ValueError(
            f"Cannot find a correct issue. Pattern is {issue_re.pattern}"
        )

    return issue


@functools.lru_cache(maxsize=1)
def get_git_user_name() -> str:
    if name := os.getenv(ENV_USERNAME):
        return name
    return git("config", "--get", "user.name").stdout


@functools.lru_cache(maxsize=1)
def get_git_refs() -> t.Mapping[str, RefInfo]:
    lines = git(
        "for-each-ref",
        "--no-stdin",
        "--omit-empty",
        "--format",
        "%(refname)&%(upstream:track)&%(HEAD)",
    )
    data: dict[str, RefInfo] = {}

    for line in lines.out_lines:
        refname, track, head = line.split("&")
        if refname.endswith("HEAD"):
            continue
        if not re.match("refs/(?:heads|remotes)/", refname):
            continue

        info = RefInfo(
            full_ref=refname,
            head=head == "*",
            gone=track == "[gone]",
        )
        data[info.ref] = info

    return data


@functools.lru_cache()
def format_date(timestamp: datetime.datetime) -> str:
    return f"{timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')} ({format_days_ago(timestamp)})"


@functools.lru_cache()
def format_days_ago(timestamp: datetime.datetime) -> str:
    now = datetime.datetime.now(datetime.timezone.utc)
    if now < timestamp:
        raise ValueError("Date from future")

    match (now - timestamp).days:
        case 0:
            return "today"
        case 1:
            return "yesterday"
        case value:
            return f"{value} ago"


@functools.lru_cache()
def conf_issue_re() -> None | re.Pattern[str]:
    return re.compile(os.getenv(ENV_ISSUE_RE, "^$"), re.UNICODE)


@functools.lru_cache()
def conf_issue_url_format() -> str:
    if (value := os.getenv(ENV_ISSUE_URL_FORMAT)) is not None:
        if urllib.parse.urlparse(value).scheme not in {"http", "https"}:
            raise ValueError(f"Incorrect URL format: {value}")
        return value

    return ""


@functools.lru_cache()
def conf_target() -> str:
    branch = os.getenv(ENV_TARGET)
    if branch is None:
        branch = git(
            "symbolic-ref", "--short", f"refs/remotes/{conf_remote()}/HEAD"
        ).stdout

    validate_branch_exists(branch)

    return branch


def conf_remote() -> str:
    return os.getenv(ENV_REMOTE, "origin")


def validate_branch_exists(value: str) -> None:
    if not any(name == value for name, ref in get_git_refs().items()):
        raise GitBrError(f"{value} does not exist")


def git(*command: str) -> SubprocessResult:
    return SubprocessResult.make(
        subprocess.run(
            ["git"] + list(command),
            text=True,
            capture_output=True,
            check=True,
            timeout=GIT_TIMEOUT,
        )
    )


def fzf(
    input: str | collections.abc.Buffer,
    *,
    multi_select: bool = False,
    auto_select: bool = False,
    query: str = ""
) -> list[str]:
    if not shutil.which("fzf"):
        raise GitBrError("fzf is not available")

    if not os.isatty(sys.stdin.fileno()):
        raise GitBrError("Available only with interactive terminal")

    args = [
        "fzf",
        "--height=~20%",
        "--no-sort",
        "--border=none",
        "--info=hidden",
    ]
    if multi_select:
        args.append("--multi")
    if auto_select:
        args.append("--select-1")
    if query:
        args.extend(["--query", query])

    res = SubprocessResult.make(
        subprocess.run(
            args,
            text=True,
            input=input,
            capture_output=True,
            check=False,
        )
    )
    match res.return_code:
        case 0:
            return res.out_lines
        case 130:
            return []

    raise GitBrError(
        f"fzf has finished with {res.return_code} return code: {res.stderr}"
    )


if __name__ == "__main__":
    sys.exit(main())
