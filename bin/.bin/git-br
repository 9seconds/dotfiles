#!/usr/bin/env python3
# MIT License
#
# Copyright (c) 2024 Sergey Arkhipov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import annotations

import argparse
import base64
import dataclasses
import datetime
import functools
import json
import logging
import os
import re
import shutil
import subprocess
import sys
import typing as t
import zlib


LOG: t.Final[logging.Logger] = logging.getLogger(__name__)

GIT_TIMEOUT: t.Final[int] = 10
GIT_CONFIG_NAME: t.Final[str] = "gitbr"
CURRENT_BRANCH: t.Final[str] = "."

ENV_PREFIX: t.Final[str] = "GITBR_"
ENV_ISSUE_URL_FORMAT: t.Final[str] = f"{ENV_PREFIX}ISSUE_URL"
ENV_ISSUE_RE: t.Final[str] = f"{ENV_PREFIX}ISSUE_RE"
ENV_USERNAME: t.Final[str] = f"{ENV_PREFIX}USERNAME"

ISSUE_URL_FORMAT: t.Final[str] = os.getenv(ENV_ISSUE_URL_FORMAT, "")
if ISSUE_URL_FORMAT and not ISSUE_URL_FORMAT.startswith(
    ("http://", "https://")
):
    sys.exit(f"${ENV_ISSUE_URL_FORMAT} does not define http URL")

ISSUE_RE: None | re.Pattern[str] = None
if ENV_ISSUE_RE in os.environ:
    try:
        ISSUE_RE = re.compile(t.cast(str, os.getenv(ENV_ISSUE_RE)), re.UNICODE)
    except re.error as exc:
        sys.exit(f"Incorrect regular expression at ${ENV_ISSUE_RE}: {exc}")


@dataclasses.dataclass(kw_only=True, frozen=True)
class RefInfo:
    local_ref: str
    remote: str
    remote_ref: str
    head: bool
    gone: bool

    @functools.lru_cache(maxsize=1)
    def is_local(self) -> bool:
        return self.local_ref.startswith("refs/heads/")

    @functools.cached_property
    def short_local_ref(self) -> str:
        return make_short_ref_name(self.local_ref)

    @functools.cached_property
    def short_remote_ref(self) -> str:
        return make_short_ref_name(self.remote_ref)


@dataclasses.dataclass(kw_only=True)
class Metadata:
    timestamp: datetime.datetime = dataclasses.field(
        default_factory=lambda: datetime.datetime.now(datetime.timezone.utc)
    )
    description: str = dataclasses.field(default="")
    issue: str = dataclasses.field(default="")
    issue_url: str = dataclasses.field(default="")

    @property
    def created_at(self) -> str:
        return format_date(self.timestamp)

    def serialize(self) -> str:
        as_dict = dataclasses.asdict(self)
        as_dict["timestamp"] = as_dict["timestamp"].isoformat()
        as_json = json.dumps(as_dict, separators=(",", ":"))
        as_zlib = zlib.compress(as_json.encode(), level=zlib.Z_BEST_COMPRESSION)
        as_str = base64.a85encode(as_zlib).decode("latin-1")

        return as_str

    @classmethod
    def load_from(cls, as_str: str) -> Metadata:
        as_zlib = base64.a85decode(as_str.encode("latin-1"))
        as_json = zlib.decompress(as_zlib)
        as_dict = json.loads(as_json)
        as_dict["timestamp"] = datetime.datetime.fromisoformat(
            as_dict["timestamp"]
        )

        return cls(**as_dict)


@dataclasses.dataclass(kw_only=True)
class Branch:
    name: str
    metadata: Metadata | None = dataclasses.field(default=None)

    @functools.cached_property
    def upstream(self) -> str:
        try:
            ref = get_git_refs()[self.name]
        except KeyError:
            return ""

        if not ref.remote:
            return ""

        return f"{ref.remote}/{ref.short_remote_ref}"

    @functools.cached_property
    def unique_commits(self) -> tuple[tuple[datetime.datetime, str], ...]:
        if not self.upstream:
            return ()

        proc = git(
            "log",
            "--pretty=format:%cI\t%aN",
            f"{self.upstream}..{self.name}",
        )

        lines = []
        for line in proc.stdout.splitlines():
            date, author = line.split("\t")
            lines.append((datetime.datetime.fromisoformat(date), author))

        return tuple(lines)

    @functools.cached_property
    def last_updated(self) -> str:
        if not self.unique_commits:
            return ""

        return format_date(self.unique_commits[0][0])

    @functools.cached_property
    def author_stats(self) -> t.Mapping[str, int]:
        if not self.unique_commits:
            return {}

        stats: dict[str, int] = {}
        for _, author in self.unique_commits:
            stats.setdefault(author, 0)
            stats[author] += 1

        return stats

    def save(self) -> None:
        if self.metadata:
            git(
                "config",
                "--local",
                "--replace-all",
                f"branch.{self.name}.{GIT_CONFIG_NAME}",
                self.metadata.serialize(),
            )

    @classmethod
    def load_from(self, name: str) -> Branch:
        branch = Branch(name=name)

        try:
            value = git(
                "config",
                "--local",
                "--get",
                f"branch.{name}.{GIT_CONFIG_NAME}",
            )
        except subprocess.CalledProcessError:
            pass
        else:
            branch.metadata = Metadata.load_from(value.stdout.rstrip())

        return branch


def main() -> str | int | None:
    options = get_options()

    if options.debug:
        logging.basicConfig(
            format="%(levelname)s: %(message)s", level=logging.DEBUG
        )
    else:
        logging.basicConfig(format="%(message)s", level=logging.INFO)

    try:
        return t.cast(str | None, options.run(options))
    except subprocess.CalledProcessError as exc:
        LOG.error("Command %s has finished with %d", exc.cmd, exc.returncode)
        LOG.error("Stdout: %s", exc.stdout)
        LOG.error("Stderr: %s", exc.stderr)
        return 1


def get_options() -> argparse.Namespace:
    def type_upstream_branch(value: str) -> str:
        try:
            git("rev-parse", f"refs/remotes/{value}")
        except subprocess.CalledProcessError as exc:
            first_line = next(iter(exc.stderr.splitlines()))
            raise argparse.ArgumentTypeError(first_line)
        return value

    def type_branch(value: str) -> str:
        if value == CURRENT_BRANCH:
            try:
                proc = git("symbolic-ref", "--short", "--quiet", "HEAD")
            except subprocess.CalledProcessError as exc:
                raise argparse.ArgumentTypeError(exc.stderr.rstrip())
            else:
                value = proc.stdout.rstrip()

        if not any(
            ref.is_local() and name == value
            for name, ref in get_git_refs().items()
        ):
            raise argparse.ArgumentTypeError("Unknown reference")

        return value

    def type_branch_stem(value: str) -> str:
        if not re.fullmatch(r"[a-zA-Z0-9/-_]+", value):
            raise argparse.ArgumentTypeError(
                "Stem should be alphanumeric, dash, underscore and /"
            )
        return value.replace("-", "_")

    parser = argparse.ArgumentParser(
        description="9seconds manages git branches.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        default=False,
        help="Run in debug mode.",
    )

    subparsers = parser.add_subparsers()

    new_parser = subparsers.add_parser(
        "new",
        aliases=["n"],
        description="Create new branch.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    new_parser.add_argument(
        "-u",
        "--upstream",
        action="store_true",
        default=False,
        help="Set upstream configuration.",
    )
    new_parser.add_argument(
        "-i",
        "--issue",
        help="Some text that contains issue ID (could be a link).",
    )
    new_parser.add_argument(
        "-t",
        "--description",
        default=None,
        help="Branch description.",
    )
    new_parser.add_argument(
        "stem",
        type=type_branch_stem,
        help="Suffix of the branch, short description.",
    )
    new_parser.set_defaults(run=cmd_new)

    edit_parser = subparsers.add_parser(
        "edit", aliases=["e"], help="Edit branch metadata."
    )
    edit_parser.add_argument(
        "-i",
        "--issue",
        help="Some text that contains issue ID (could be a link).",
    )
    edit_parser.add_argument(
        "-t",
        "--description",
        default=None,
        help="Branch description.",
    )
    edit_parser.add_argument(
        "branch", type=type_branch, default=CURRENT_BRANCH, help="Branch name."
    )
    edit_parser.set_defaults(run=cmd_edit)

    switch_parser = subparsers.add_parser(
        "switch",
        aliases=["w"],
        description="Switch to another branch. Requires fzf.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    switch_parser.set_defaults(run=cmd_switch)

    delete_parser = subparsers.add_parser(
        "delete",
        aliases=["d"],
        description="Delete branches.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    delete_parser.add_argument(
        "-u",
        "--upstream",
        action="store_true",
        default=False,
        help="Delete upstream as well.",
    )
    delete_parser.add_argument(
        "branch",
        type=type_branch,
        nargs=argparse.ONE_OR_MORE,
        help="Branch to delete.",
    )
    delete_parser.set_defaults(run=cmd_delete)

    show_parser = subparsers.add_parser(
        "show",
        aliases=["s"],
        description="Show metadata about branch.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    show_parser.add_argument(
        "name", type=type_branch, default=CURRENT_BRANCH, help="Branch name."
    )
    show_parser.set_defaults(run=cmd_show)

    list_parser = subparsers.add_parser(
        "list",
        aliases=["l"],
        description="List branches. Current branch is always on a top.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    list_parser.add_argument(
        "-m",
        "--more",
        action="count",
        default=0,
        help=(
            "Show more and more branches (own, local everything). "
            "Repeat option to increase verbosity."
        ),
    )
    list_parser.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        help="Increase verbosity of output. Repeat option to increase.",
    )
    list_parser.set_defaults(run=cmd_list)

    gc_parser = subparsers.add_parser(
        "gc",
        aliases=["g"],
        description="Cleanup stale branches.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    gc_parser.set_defaults(run=cmd_gc)

    env_parser = subparsers.add_parser(
        "env", description="Show relevant environment and its settings."
    )
    env_parser.set_defaults(run=cmd_env)

    ns = parser.parse_args()
    if not hasattr(ns, "run"):
        parser.print_help()
        sys.exit(1)

    return ns


def cmd_new(options: argparse.Namespace) -> str | None:
    issue_stem = ""
    if options.issue:
        try:
            issue = get_issue(options.issue)
        except ValueError as exc:
            return str(exc)
        else:
            issue_stem = re.sub(r"[^a-zA-Z0-9]", "", issue.group(0)).lower()

    branch_chunks = [get_git_user_name(), issue_stem, options.stem]
    branch_name = "-".join(chunk for chunk in branch_chunks if chunk).lower()

    cli_opts = ["switch", "--create", branch_name]
    if options.upstream:
        cli_opts.append("--guess")
    else:
        cli_opts.append("--no-track")

    git(*cli_opts)
    branch = Branch(name=branch_name, metadata=Metadata())
    branch.save()

    options.branch = branch_name

    if options.issue or options.description is not None:
        return cmd_edit(options)
    return None


def cmd_edit(options: argparse.Namespace) -> str | None:
    if options.description is None and not options.issue:
        return "Please define either description or issue"

    branch = Branch.load_from(options.branch)
    if not branch.metadata:
        branch.metadata = Metadata()

    if options.description is not None:
        branch.metadata.description = options.description

    if options.issue:
        try:
            match = get_issue(options.issue)
        except ValueError as exc:
            return str(exc)
        else:
            branch.metadata.issue = match.group(0)
            branch.metadata.issue_url = match.expand(ISSUE_URL_FORMAT)

    branch.save()

    return None


def get_issue(text: str) -> re.Match[str]:
    if not ISSUE_RE:
        raise ValueError(f"${ENV_ISSUE_RE} is not defined")

    issue = ISSUE_RE.search(text)
    if not issue:
        raise ValueError(
            f"Cannot find a correct issue. Pattern is {ISSUE_RE.pattern}"
        )

    return issue


def cmd_switch(_: argparse.Namespace) -> str | None:
    if not shutil.which("fzf"):
        return "fzf is not available"

    if not os.isatty(sys.stdin.fileno()):
        return "Available only with interactive terminal"

    refs = [ref for ref in get_git_refs().values() if not ref.head]
    refs.sort(
        key=lambda ref: (
            ref.is_local(),
            ref.short_local_ref.startswith(get_git_user_name()),
            ref.short_local_ref,
        )
    )

    fzf_proc = subprocess.run(
        [
            "fzf",
            "--height=~20%",
            "--no-sort",
            "--tiebreak=length,end,index",
            "--border=none",
            "--info=hidden",
            "--prompt=Branch> ",
            f"--preview={__file__} show {{}} 2>/dev/null",
        ],
        stderr=subprocess.PIPE,
        stdout=subprocess.PIPE,
        check=False,
        input="\n".join(ref.short_local_ref for ref in refs),
        text=True,
    )
    match fzf_proc.returncode:
        case 0:
            git("checkout", fzf_proc.stdout.rstrip())
        case 130:
            return None
        case value:
            return (
                f"fzf has finished with {value} return code: {fzf_proc.stderr}"
            )

    return None


def cmd_show(options: argparse.Namespace) -> str | None:
    branch = Branch.load_from(options.name)

    print(f"upstream: {branch.upstream}")
    print(f"last_updated: {branch.last_updated}")
    print(f"unique_commits: {len(branch.unique_commits)}")

    for idx, (k, v) in enumerate(
        sorted(branch.author_stats.items(), key=lambda x: (-x[1], x[0])),
        start=1,
    ):
        print(f"author_stats.{idx}.name: {k}")
        print(f"author_stats.{idx}.count: {v}")

    if not branch.metadata:
        return None

    print(f"created_at: {branch.metadata.created_at}")
    print(f"description: {branch.metadata.description}")
    print(f"issue: {branch.metadata.issue}")
    print(f"issue_url: {branch.metadata.issue_url}")

    return None


def cmd_delete(options: argparse.Namespace) -> str | None:
    to_delete = [
        ref
        for name, ref in get_git_refs().items()
        if ref.is_local() and name in set(options.branch)
    ]
    git("branch", "-D", *[ref.short_local_ref for ref in to_delete])

    upstreams: dict[str, list[str]] = {}
    for ref in to_delete:
        if options.upstream and ref.remote:
            upstreams.setdefault(ref.remote, []).append(ref.remote_ref)

    for remote, branches in upstreams.items():
        git("push", "--delete", remote, *branches)

    return None


def cmd_list(options: argparse.Namespace) -> str | None:
    all_refs = sorted(get_git_refs().items())

    match options.more:
        case 0:
            all_refs = [
                (name, ref)
                for name, ref in all_refs
                if name.startswith(f"{get_git_user_name()}-") and ref.is_local()
            ]
        case 1:
            all_refs = [(name, ref) for name, ref in all_refs if ref.is_local()]

    branches: list[Branch] = []
    first_branch = Branch(name="")

    for name, ref in all_refs:
        if ref.head:
            first_branch = Branch(name=name)
        else:
            branches.append(Branch.load_from(name))

    branches.sort(key=lambda x: x.name)
    branches.insert(0, first_branch)

    for branch in branches:
        if not branch.name:
            print()
            continue

        if options.verbose == 0:
            print(branch.name)
            continue

        updated = "-"
        if up := branch.last_updated:
            updated = format_days_ago(datetime.datetime.fromisoformat(up))
        print(
            f"{branch.name} (upstream:{branch.upstream or '-'} updated:{updated} commits:{len(branch.unique_commits)})"
        )

    return None


def cmd_gc(_: argparse.Namespace) -> str | None:
    deleted_refs = [
        name
        for name, ref in get_git_refs().items()
        if ref.is_local() and ref.gone
    ]
    if deleted_refs:
        git("branch", "-D", *deleted_refs)

    return None


def cmd_env(_: argparse.Namespace) -> str | None:
    for name in sorted((ENV_ISSUE_RE, ENV_ISSUE_URL_FORMAT, ENV_USERNAME)):
        print(f"${name} = {os.getenv(name)}")
    return None


def git(*command: str) -> subprocess.CompletedProcess[str]:
    return subprocess.run(
        ["git"] + list(command),
        capture_output=True,
        check=True,
        text=True,
        timeout=GIT_TIMEOUT,
    )


@functools.lru_cache(maxsize=1)
def get_git_user_name() -> str:
    if name := os.getenv(ENV_USERNAME):
        return name
    return git("config", "--get", "user.name").stdout.rstrip()


@functools.lru_cache(maxsize=1)
def get_git_refs() -> t.Mapping[str, RefInfo]:
    proc = git(
        "for-each-ref",
        "--no-stdin",
        "--omit-empty",
        "--format",
        "%(refname)&%(upstream:remotename)&%(upstream:remoteref)&%(upstream:track)&%(HEAD)",
    )
    data: dict[str, RefInfo] = {}

    for line in proc.stdout.splitlines():
        refname, remotename, remoteref, track, head = line.split("&")
        if refname.endswith("HEAD"):
            continue
        if not re.match("refs/(?:heads|remotes)/", refname):
            continue

        info = RefInfo(
            local_ref=refname,
            remote=remotename,
            remote_ref=remoteref,
            head=head == "*",
            gone=track == "[gone]",
        )
        data[info.short_local_ref] = info

    return data


@functools.lru_cache()
def format_date(timestamp: datetime.datetime) -> str:
    return f"{timestamp.isoformat()} ({format_days_ago(timestamp)})"


@functools.lru_cache()
def format_days_ago(timestamp: datetime.datetime) -> str:
    now = datetime.datetime.now(datetime.timezone.utc)
    if now < timestamp:
        raise ValueError("Date from future")

    match (now - timestamp).days:
        case 0:
            return "today"
        case 1:
            return "yesterday"
        case value:
            return f"{value} ago"


@functools.lru_cache()
def make_short_ref_name(full_name: str) -> str:
    if full_name.startswith("refs/heads/"):
        return full_name.removeprefix("refs/heads/")
    if full_name.startswith("refs/remotes/"):
        return full_name.removeprefix("refs/remotes/")
    return full_name


if __name__ == "__main__":
    sys.exit(main())
