{
  "For loop": {
    "prefix": "for",
    "description": "A generic for loop",
    "body": [
      "for ${2:item} in ${1:items}:",
      "    $0"
    ]
  },

  "try/except": {
    "prefix": "tryex",
    "description": "A base try/except clause",
    "body": [
      "try:",
      "    ${1:$TM_SELECTED_TEXT}",
      "except ${2:${3:Exception}${4: as ${5:exc}}}:",
      "    ${0:pass}"
    ]
  },

  "try/finally": {
    "prefix": "tryfi",
    "description": "A base try/finally clause",
    "body": [
      "try:",
      "    ${1:$TM_SELECTED_TEXT}",
      "finally:",
      "    $0"
    ]
  },

  "Conditional": {
    "prefix": "if",
    "description": "A base if clause",
    "body": [
      "if ${1:clause}:",
      "    $0"
    ]
  },

  "Comprehension": {
    "prefix": "comp",
    "description": "Base for a list comprehension",
    "body": [
      "${3:expression} for ${1:item} in ${2:items}"
    ]
  },

  "Function": {
    "prefix": "def",
    "description": "Function declaraction",
    "body": [
      "def ${1:func}(${2:*args, **kwargs}):",
      "    ${0:raise NotImplementedError()}"
    ]
  },

  "Function method": {
    "prefix": "defm",
    "description": "Method declaraction",
    "body": [
      "def ${1:func}(self, ${2:*args, **kwargs}):",
      "    ${3:${5:${6:result} = }super(${4:Class}, self).$1($2)}"
    ]
  },

  "Readable property": {
    "prefix": "propr",
    "description": "Property only for reading",
    "body": [
      "@property",
      "def ${1:name}(self):",
      "    ${0:return self._$1}"
    ]
  },

  "Writable property": {
    "prefix": "propw",
    "description": "Property for reading/writing",
    "body": [
      "@property",
      "def ${1:name}(self):",
      "    ${2:return self._$1}",
      "",
      "@${1}.setter",
      "def ${1}(self, value):",
      "    ${0:self._$1 = value}"
    ]
  },

  "set pdb": {
    "prefix": "pdb",
    "description": "pdb.set_trace()",
    "body": [
      "import pdb; pdb.set_trace()"
    ]
  },

  "from . import something": {
    "prefix": "fri",
    "description": "Add from . import . clause",
    "body": [
      "from ${1:foo} import ${2:bar}${3: as ${4:_$2}}"
    ]
  },

  "lambda definition": {
    "prefix": "la",
    "description": "Lambda function definition",
    "body": [
      "lambda ${1:element}: ${0:$1}"
    ]
  },

  "docstring with single quote": {
    "prefix": "d'",
    "description": "Add docstring with a single quote",
    "body": [
      "'''",
      "$0",
      "'''"
    ]
  }
}
