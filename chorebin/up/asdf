#!/usr/bin/env python3

import concurrent.futures
import os
import shlex
import subprocess
import sys
import warnings

import pkg_resources


warnings.filterwarnings(
    "ignore",
    category=pkg_resources.PkgResourcesDeprecationWarning)


SHELL = os.getenv("SHELL")
if not SHELL:
    sys.exit("Cannot detect shell to use")
POOL = concurrent.futures.ThreadPoolExecutor()


def asdf_run(command):
    command = ["asdf"] + command
    return subprocess.run([SHELL, "-c", shlex.join(command)])


def asdf_output(command):
    command = ["asdf"] + command
    output = subprocess.check_output(
        [SHELL, "-c", shlex.join(command)],
        stderr=subprocess.STDOUT)

    for line in output.splitlines():
        yield line.decode().rstrip()


def get_latest_version(name, current_version):
    return max(
        (
            version
            for ver in asdf_output(["list", "all", name])
            if not (version := pkg_resources.parse_version(ver.strip())).is_prerelease
        ),
        default=current_version
    )


def get_old_versions(name):
    versions = {
        ver.strip()
        for ver in asdf_output(["list", name])
        if "*" not in ver
    }
    if name == "python":
        versions.discard("2.7.18")

    return versions


asdf_run(["update"])
asdf_run(["plugin", "update", "--all"])


installed_versions = (
    tuple(line.split()) for line in asdf_output(["current"])
)
installed_versions = {
    name: pkg_resources.parse_version(version)
    for name, version, *_ in installed_versions
}


latest_versions = {
    name: POOL.submit(get_latest_version, name, version)
    for name, version in installed_versions.items()
}
latest_versions = {name: future.result() for name, future in latest_versions.items()}


if not os.getenv("CHORE_ARG_INSTALL"):
    for name in installed_versions:
        print(f">>> {name}: {installed_versions[name]} -> {latest_versions[name]}")
    sys.exit(os.EX_OK)

for name in installed_versions:
    if latest_versions[name] > installed_versions[name]:
        print(f">>> update {name} from {installed_versions[name]} to {latest_versions[name]}")
        asdf_run(["install", name, latest_versions[name]])
        asdf_run(["global", name, latest_versions[name]])


if not os.getenv("CHORE_ARG_CLEANUP"):
    sys.exit(os.EX_OK)


old_versions = {
    name: POOL.submit(get_old_versions, name)
    for name in installed_versions
}
old_versions = {name: future.result() for name, future in old_versions.items()}

for name, versions in old_versions.items():
    for ver in sorted(versions):
        print(f">>> remove {name}/{ver}")
        asdf_run(["uninstall", name, ver])
